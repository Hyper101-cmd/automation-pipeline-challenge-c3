- name: Ensure apt cache is up-to-date
  ansible.builtin.apt:
    update_cache: true
  when: ansible_facts['pkg_mgr'] is not defined or ansible_facts['pkg_mgr'] == 'apt'

- name: Install nginx
  ansible.builtin.apt:
    name: nginx
    state: present
    update_cache: true

- name: Ensure directories for SSL exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - /etc/ssl/certs
    - /etc/ssl/private

- name: Deploy self-signed certificate (generated by separate playbook or create here)
  ansible.builtin.copy:
    src: "{{ ssl_cert_src | default('files/selfsigned.crt') }}"
    dest: "{{ ssl_cert_path }}"
    owner: root
    mode: '0644'
  notify: Reload nginx

- name: Deploy private key
  ansible.builtin.copy:
    src: "{{ ssl_key_src | default('files/selfsigned.key') }}"
    dest: "{{ ssl_key_path }}"
    owner: root
    mode: '0600'
  notify: Reload nginx

- name: Deploy nginx site config
  ansible.builtin.template:
    src: "templates/site.conf.j2"
    dest: /etc/nginx/sites-available/imago.conf
    owner: root
    mode: '0644'
  notify: Reload nginx

- name: Enable site
  ansible.builtin.file:
    src: /etc/nginx/sites-available/imago.conf
    dest: /etc/nginx/sites-enabled/imago.conf
    state: link
    force: true
  notify: Reload nginx

- name: Remove default site (optional)
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: Reload nginx

- name: Test nginx config
  ansible.builtin.command: nginx -t
  register: nginx_test
  changed_when: false
  failed_when: nginx_test.rc != 0

- name: Ensure Nginx is running and enabled
  ansible.builtin.service:
    name: nginx
    state: started
    enabled: true

